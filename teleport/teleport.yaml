---
# By default, this file should be stored in /etc/teleport.yaml

# This section of the configuration file applies to all teleport
# services.
teleport:
  # Data directory where Teleport keeps its data, like keys/users for
  # authentication (if using the default BoltDB back-end)
  data_dir: ${DATA_DIR}

  # list of auth servers in a cluster. you will have more than one auth server
  # if you configure teleport auth to run in HA configuration
  ${AUTH_SERVERS_}

  # Teleport throttles all connections to avoid abuse. These settings allow
  # you to adjust the default limits
  connection_limits:
    max_connections: 1000
    max_users: 250

  # Logging configuration. Possible output values are 'stdout', 'stderr' and
  # 'syslog'. Possible severity values are INFO, WARN and ERROR (default).
  log:
    output: ${LOG_OUTPUT}
    severity: ${LOG_SEVERITY}

  # Type of storage used for keys. You need to configure this to use etcd
  # backend if you want to run Teleport in HA configuration.
  storage:
    type: dynamodb
    region: $DYNAMODB_REGION
    table_name: $DYNAMODB_TABLE

# This section configures the 'auth service':
auth_service:
  # Turns 'auth' role on. Default is 'yes'
  enabled: $ENABLE_AUTH

  authentication:
    # default authentication type. possible values are 'local', 'oidc' and 'saml'
    # only local authentication (Teleport's own user DB) is supported in the open
    # source version
    type: local
    # second_factor can be off, otp, or u2f
    second_factor: otp

  # IP and the port to bind to. Other Teleport nodes will be connecting to
  # this port (AKA "Auth API" or "Cluster API") to validate client
  # certificates
  listen_addr: 0.0.0.0:3025

  # Pre-defined tokens for adding new nodes to a cluster. Each token specifies
  # the role a new node will be allowed to assume. The more secure way to
  # add nodes is to use `ttl node add --ttl` command to generate auto-expiring
  # tokens.
  #
  # We recommend to use tools like `pwgen` to generate sufficiently random
  # tokens of 32+ byte length.
  ${TOKENS_}

  # Optional "cluster name" is needed when configuring trust between multiple
  # auth servers. A cluster name is used as part of a signature in certificates
  # generated by this CA.
  #
  # By default an automatically generated GUID is used.
  #
  # IMPORTANT: if you change cluster_name, it will invalidate all generated
  # certificates and keys (may need to wipe out /var/lib/teleport directory)
  cluster_name: ${CLUSTER_NAME}

# This section configures the 'node service':
ssh_service:
  # Turns 'ssh' role on. Default is 'yes'
  enabled: false

# This section configures the 'proxy servie'
proxy_service:
  # Turns 'proxy' role on. Default is 'yes'
  enabled: $ENABLE_PROXY

  # SSH forwarding/proxy address. Command line (CLI) clients always begin their
  # SSH sessions by connecting to this port
  listen_addr: 0.0.0.0:3023

  # Reverse tunnel listening address. An auth server (CA) can establish an
  # outbound (from behind the firewall) connection to this address.
  # This will allow users of the outside CA to connect to behind-the-firewall
  # nodes.
  tunnel_listen_addr: 0.0.0.0:3024

  # The HTTPS listen address to serve the Web UI and also to authenticate the
  # command line (CLI) users via password+HOTP
  web_listen_addr: 0.0.0.0:3080

  # TLS certificate for the HTTPS connection. Configuring these properly is
  # critical for Teleport security.
  #https_key_file: /etc/letsencrypt/live/teleport.skyscrape.rs/privkey.pem
  #https_cert_file: /etc/letsencrypt/live/teleport.skyscrape.rs/fullchain.pem
